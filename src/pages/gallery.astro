---
import HeadingSection from "@/components/HeadingSection.astro";
import MainLayout from "@/layouts/MainLayout.astro";


import Image from "astro/components/Image.astro";
import image1 from "../images/beauty-salon/22.jpg";
import image2 from "../images/beauty-salon/20.jpg";
import image4 from "../images/beauty-salon/10.jpg";
import image3 from "../images/beauty-salon/3.jpg";
import image5 from "../images/beauty-salon/5.jpg";
import image6 from "../images/beauty-salon/6.jpg";

// Store both the image object and its URL
const images = [
  { src: image1, alt: "Gallery Image 1", url: image1.src },
  { src: image2, alt: "Gallery Image 2", url: image2.src },
  { src: image3, alt: "Gallery Image 3", url: image3.src },
  { src: image4, alt: "Gallery Image 4", url: image4.src },
  { src: image5, alt: "Gallery Image 5", url: image5.src },
  { src: image6, alt: "Gallery Image 6", url: image6.src },
];

---

<MainLayout>
  <HeadingSection title="Gallery" />

  <div class="container mx-auto px-20 py-10">
    <div class="flex flex-col gap-6 py-5">
      <h1 class="text-neutral-500 text-xl">
        Aenean vel posuere urna, sit amet placerat massa. Quisque efficitur
        interdum libero, sed dictum lorem euismod sed.
      </h1>

      <p class="text-neutral-500">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed dictum
        eleifend eros a pharetra. Cras aliquam vestibulum vehicula. Sed sed
        lectus risus. Vestibulum maximus ac purus in euismod. In venenatis
        tellus ante, id porta risus semper quis
      </p>
    </div>

    <div>

        <div class="grid grid-cols-3 gap-6">
            {
              images.map((image, index) => (
                <div class="relative group">
                  <Image
                    src={image.src}
                    alt={image.alt}
                    class="h-96 w-full object-cover"
                  />
                  {/* Hover overlay */}
                  <div
                    class="absolute inset-0 bg-brown-800/70 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center cursor-pointer"
                    onclick={`openModal(${index})`}
                  >
                    <span class="text-white text-5xl font-light">+</span>
                  </div>
                </div>
              ))
            }
          </div>


    </div>
  </div>

  <div
  id="imageModal"
  class="fixed inset-0 z-50 hidden bg-black/90"
>
  <button
    onclick="closeModal()"
    class="absolute top-6 right-6 text-white hover:text-gray-300 focus:outline-none z-[60]"
    aria-label="Close modal"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-8 w-8"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M6 18L18 6M6 6l12 12"
      />
    </svg>
  </button>

  <div class="fixed inset-0 flex items-center justify-center p-4">
    <div class="relative w-full max-w-5xl mx-auto">
      <img
        id="modalImage"
        src=""
        alt="Modal Image"
        class="w-full h-auto max-h-[85vh] object-contain mx-auto"
      />
    </div>
  </div>
</div>
</MainLayout>




<script define:vars={{ images }}>
    let currentModal;
    let currentModalImg;
  
    function initializeGallery() {
      currentModal = document.getElementById('imageModal');
      currentModalImg = document.getElementById('modalImage');
  
      // Close modal when clicking outside the image
      currentModal?.addEventListener('click', function(event) {
        if (event.target === this) {
          closeModal();
        }
      });
  
      // Close modal with escape key
      document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
          closeModal();
        }
      });
    }
  
    function openModal(imageIndex) {
      if (currentModal && currentModalImg) {
        // Use the URL property instead of src
        const imageUrl = images[imageIndex].url;
        currentModal.classList.remove('hidden');
        currentModal.classList.add('flex');
        currentModalImg.src = imageUrl;
        document.body.classList.add('overflow-hidden');
      }
    }
  
    function closeModal() {
      if (currentModal) {
        currentModal.classList.add('hidden');
        currentModal.classList.remove('flex');
        document.body.classList.remove('overflow-hidden');
      }
    }
  
    // Initialize gallery when the DOM is loaded
    document.addEventListener('DOMContentLoaded', initializeGallery);
  
    // Make functions available globally
    window.openModal = openModal;
    window.closeModal = closeModal;
  </script>
  
  <style>
    /* Custom brown color for hover effect */
    .bg-brown-800\/70 {
      background-color: rgb(93, 64, 55, 0.7);
    }
  </style>